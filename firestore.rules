rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isOneOfRoles(array) {
      return request.auth.token.role in array;
    }

    function isCreating() {
      return resource == null;
    }

    function onlyAffectsFields(fields) {
      return isCreating()
      ? request.resource.data.keys().hasOnly(fields)
      : request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)
    }

    function myDocument(userId) {
      return request.auth.uid == userId;
    }

    function myDocumentOrAdmin(userId) {
      return request.auth.uid == userId || isOneOfRoles(['ADMIN', 'MODERATOR', 'SUPER_USER']);
    }

    function isFutureDate(date) {
      return date is timestamp && date > request.time;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
      allow read;
      allow update: if (myDocument(userId) && onlyAffectsFields(['anonymous','avatar','displayName']));
      allow update: if (isOneOfRoles(['MODERATOR', 'SUPER_USER']) && onlyAffectsFields(['role']));
    }

    match /users/{userId}/privateUserData/data {
      allow read: if myDocumentOrAdmin(userId);
      allow update: if (myDocument(userId) && onlyAffectsFields(['name','lastNames']));
    }

    match /users/{userId}/userShares/{userSharesId} {
      allow read: if myDocumentOrAdmin(userId);
    }

    match /projects/{projectId} {
      allow read;
      allow create, update: if isOneOfRoles(['MODERATOR', 'SUPER_USER']);
    }

    match /projects/{projectId}/projectDiscounts/{projectDiscountId} {
      allow read;
      allow create: if (isOneOfRoles(['MODERATOR', 'SUPER_USER']) && onlyAffectsFields(['description','discount','lastUpdate','name','quantity','sharesSold']));
      allow update: if (isOneOfRoles(['MODERATOR', 'SUPER_USER']) && onlyAffectsFields(['description','name']));
    }
  }
}